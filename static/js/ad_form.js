window.addEventListener('load', function() {

const inputElement = document.getElementById('images');
const previewContainer = document.getElementById('image-preview');

const fileMap = new Map(); // {index: {file, element}}
let index = 1;
//index = performance.now(); // –ï—â–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π

let cropper;
let currentCropIndex = 0;
const cropModal = new bootstrap.Modal(document.getElementById("cropModal"));
const cropImage = document.getElementById("crop-image");

const adForm = document.getElementById('ad-form');

const MAX_FILES = 10;

inputElement.addEventListener('change', function (event) {
    const files = Array.from(event.target.files)
        .filter(file => file.type.match('image.*'));

    if (fileMap.size + files.length > MAX_FILES) {
        alert(`–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ ${MAX_FILES} —Ñ–∞–π–ª–æ–≤`);
        return;
    }

    files.forEach((file) => {
        addImageToMap(file, getNextIndex());
    });
});


function getNextIndex() {
    while (fileMap.has(index)) index++;
    return index++;
}

function addImageToMap(file, index) {
    const previewElement = createPreviewElement(file, index);
    previewContainer.appendChild(previewElement);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Map
    fileMap.set(index, {

        file: file,
        element: previewElement,
        objectURL: previewElement.querySelector('img').src
    });
    updateFileCount()
}

function createPreviewElement(file, index) {
    const container = document.createElement("div");
    container.className = "preview-container";
    container.dataset.index = index;

    const img = document.createElement("img");
    const objectURL = URL.createObjectURL(file);
    img.src = objectURL;

    const deleteIcon = document.createElement("div");
    deleteIcon.className = "delete-icon";
    deleteIcon.innerHTML = "üóë";

    deleteIcon.addEventListener("click", (e) => {
        e.stopPropagation();
        removeImage(index);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    img.addEventListener("click", (e) => {
        e.stopPropagation();
        currentCropIndex = index;
        startCropper(file);
        console.log("–ö–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
    });

    container.append(img, deleteIcon);
    console.log("–ü—Ä–µ–≤—å—é")
    return container;
}

function removeImage(img_index) {
    if (!fileMap.has(img_index)) return;

    const { element, objectURL } = fileMap.get(img_index);
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
    if (objectURL) URL.revokeObjectURL(objectURL);

    // 1. –£–¥–∞–ª—è–µ–º –∏–∑ DOM
    element.remove();

    // 2. –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
//    URL.revokeObjectURL(objectURL);

    // 3. –£–¥–∞–ª—è–µ–º –∏–∑ Map
    fileMap.delete(img_index);
    updateFileCount()
}

// –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ä–º—ã)
function getAllFiles() {
    return Array.from(fileMap.values()).map(item => item.file);
}

// –ö–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function startCropper(file) {
    const reader = new FileReader();
    reader.onload = function (e) {
        cropImage.src = e.target.result;
        cropModal.show();

        if (cropper) cropper.destroy();

        cropper = new Cropper(cropImage, {
//            aspectRatio: 16/9 // –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö —Ñ–æ—Ç–æ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ)
            aspectRatio: 4/3,  // –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ–æ—Ç–æ
//            aspectRatio: 1    // –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä
            viewMode: 1,
            autoCropArea: 1,
            responsive: true,
            movable: true,
            zoomable: true,
            rotatable: false,
        });
    };
    reader.readAsDataURL(file);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
document.getElementById("crop-confirm").addEventListener("click", async function () {
    if (!cropper) return;
    try {
        const oldData = fileMap.get(currentCropIndex);
                if (!oldData) {
            console.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è");
            return;
        }
    cropper.getCroppedCanvas({ width: 1200, height: 900 }).toBlob(async (blob) => {
     try {
        // 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏–∑ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const croppedFile = new File([blob], `cropped_${Date.now()}.jpg`, {
            type: "image/jpeg"
        });

        // 2. –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const resized = await resizeImage(croppedFile, 1024, 1024, 0.75);

                // 3. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ DOM –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
                if (oldData && oldData.element && oldData.element.parentNode) {
                    oldData.element.remove(); // –£–¥–∞–ª—è–µ–º DOM-—ç–ª–µ–º–µ–Ω—Ç
                    URL.revokeObjectURL(oldData.objectURL); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
                }

        // 3. –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–≤—å—é (–∫–∞–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ)
        const newPreview = createPreviewElement(resized, currentCropIndex);

//        //4. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–≤—å—é
//        const oldData = fileMap.get(currentCropIndex);
//        if (oldData && oldData.element) {
//            URL.revokeObjectURL(oldData.objectURL);
//        }

        // 5. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ filesMap
        const objectURL = URL.createObjectURL(resized);
        fileMap.set(currentCropIndex, {
                    file: resized,
                    element: newPreview,
                    objectURL: objectURL
                });


        // 6. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ DOM
        previewContainer.appendChild(newPreview);

        // 7. –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ —á–∏—Å—Ç–∏–º —Ä–µ—Å—É—Ä—Å—ã
        cropModal.hide();
        cropper.destroy();
        cropper = null;
            } catch (e) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", e);
            }
    }, "image/jpeg", 0.9);
       } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏", e);
    }

    updateFileCount()
});

// –§—É–Ω–∫—Ü–∏—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
function resizeImage(file, maxWidth, maxHeight, quality) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Promise –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    return new Promise((resolve, reject) => {
        try {
            // 1. –°–æ–∑–¥–∞–µ–º FileReader –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            const reader = new FileReader();
            reader.onerror = () => reject(new Error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞"));
            // 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            reader.onload = (event) => {
                try {
                    // 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Image –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    const img = new Image();
                    img.onerror = () => reject(new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"));
                    // 4. –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å
                    img.onload = () => {
                        try {
                            // 5. –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                            const canvas = document.createElement("canvas");

                            // 6. –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            let width = img.width;
                            let height = img.height;

                            // 7. –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π:
                            //    –ï—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –±–æ–ª—å—à–µ –≤—ã—Å–æ—Ç—ã –∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç maxWidth
                            if (width > height && width > maxWidth) {
                                // 8. –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –≤—ã—Å–æ—Ç—É –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                                height *= maxWidth / width;
                                width = maxWidth;
                            }
                            //    –ò–Ω–∞—á–µ –µ—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç maxHeight
                            else if (height > maxHeight) {
                                // 9. –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é —à–∏—Ä–∏–Ω—É –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                                width *= maxHeight / height;
                                height = maxHeight;
                            }

                            // 10. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã canvas
                            canvas.width = width;
                            canvas.height = height;
                            // 11. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–∞ canvas
                            const ctx = canvas.getContext("2d");
                            // 12. –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
                            ctx.drawImage(img, 0, 0, width, height);
                            // 13. –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                            const mimeType = file.type === "image/png" ? "image/png" : "image/jpeg";
                            // 14. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º canvas –≤ Blob (–±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
                            canvas.toBlob(blob => {
                                // 15. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
                                const newName = `img_${Date.now()}` + (mimeType === "image/png" ? ".png" : ".jpg");
                                // 16. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π File –æ–±—ä–µ–∫—Ç –∏–∑ Blob
                                const resized = new File([blob], newName, { type: mimeType });
                                // 17. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ Promise
                                resolve(resized);
                            }, mimeType, quality); // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∏ –∫–∞—á–µ—Å—Ç–≤–æ
                        } catch (e) {
                            reject(e);
                        }
                    };
                    // 18. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å—Ä–∞–±–æ—Ç–∞–µ—Ç onload)
                    img.src = event.target.result;
                } catch (e) {
                    reject(e);
                }
            }
            // 19. –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ Data URL (base64)
            reader.readAsDataURL(file);
        } catch (e) {
            reject(e);
        }
    })
}

function updateFileCount() {
    const countText = fileMap.size ? `–í—ã–±—Ä–∞–Ω–æ: ${fileMap.size} —Ñ–∞–π–ª(–æ–≤)` : '–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã';
    document.getElementById("file-count").textContent = countText;
}

cropModal._element.addEventListener('hidden.bs.modal', function () {
    if (cropper) {
        cropper.destroy();
        cropper = null;
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
adForm.addEventListener('submit', async function(e) {
    e.preventDefault();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    document.getElementById('upload-indicator').style.display = 'block';

    try {
        // –°–æ–∑–¥–∞–µ–º DataTransfer —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
        const dataTransfer = new DataTransfer();
        fileMap.forEach(data => dataTransfer.items.add(data.file));

        // –ó–∞–º–µ–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤ input
        inputElement.files = dataTransfer.files;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        adForm.submit();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã');
        document.getElementById('upload-indicator').style.display = 'none';
    }
});

});