"""–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–¥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ csv –≤ —Ç–∞–±–ª–∏—Ü—É —Å —Å–∞–π—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä–æ–∫ –∞–≤—Ç–æ"""
import pandas as pd
import psycopg2
import re
import numpy as np

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
try:
    conn = psycopg2.connect(
        dbname="auto_board",
        user="postgres",
        password="1234",
        host="localhost",
        port="5432"
    )
    cursor = conn.cursor()
except psycopg2.OperationalError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    exit(1)

# üîπ –ß–∏—Ç–∞–µ–º CSV
csv_file = "base.csv"
try:
    df = pd.read_csv(csv_file)
except FileNotFoundError:
    print(f"‚ùå –§–∞–π–ª {csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    exit(1)

# üîπ –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
# –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
df.columns = [
    f"col_{col}" if re.match(r"^\d", col) else re.sub(r'\W+', '_', col).lower()
    for col in df.columns
]

# üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –∑–∞–º–µ–Ω—è–µ–º NaN/None/False/True –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
df = df.astype(str).replace({"nan": "", "None": "", "False": "0", "True": "1"})

# üîπ –£–¥–∞–ª—è–µ–º `.0` –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏, –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞
for col in df.columns:
    df[col] = df[col].apply(lambda x: x[:-2] if x.endswith(".0") else x)
    df[col] = df[col].replace("", "NULL")  # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ NULL –¥–ª—è PostgreSQL
    df[col] = df[col].apply(lambda x: x.replace(",", ".") if re.match(r"^\d+[,.]\d+$", x) else x)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 20,3 –≤ 20.3
    df[col] = df[col].apply(lambda x: "NULL" if x == "" else x)
    df[col] = df[col].apply(lambda x: str(int(float(x))) if re.match(r"^\d+\.\d+$", x) else x)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "21.5" –≤ "21"

# üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º SQL-—Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ - TEXT)
column_types = {col: "TEXT" for col in df.columns}

# üîπ –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
try:
    table_name = "cars_data_test"
    create_table_query = f"CREATE TABLE IF NOT EXISTS {table_name} (\n"
    create_table_query += ",\n".join([f"    \"{col}\" {col_type}" for col, col_type in column_types.items()])
    create_table_query += "\n);"
    cursor.execute(create_table_query)
    conn.commit()
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
except psycopg2.Error as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
    exit(1)

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL
columns = ", ".join([f"\"{col}\"" for col in df.columns])
placeholders = ", ".join(["%s"] * len(df.columns))
insert_query = f"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})"

for _, row in df.iterrows():
    try:
        row = [None if value == "NULL" else value for value in row]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "NULL" –æ–±—Ä–∞—Ç–Ω–æ –≤ None
        cursor.execute(insert_query, tuple(row))
    except psycopg2.Error as e:
        conn.rollback()
        print(f"‚ö† –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏: {e}")
        print(f"–°—Ç—Ä–æ–∫–∞ —Å –æ—à–∏–±–∫–æ–π: {row}")

conn.commit()
cursor.close()
conn.close()

print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ PostgreSQL!")
