import re
import phonenumbers
from ads.models import CarsDataTest
from asgiref.sync import sync_to_async  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º sync_to_async

from django.core.cache import cache


CAR_BRANDS = list(CarsDataTest.objects.values_list("mark_name", flat=True).distinct().order_by("mark_name"))

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –±—Ä–µ–Ω–¥–æ–≤
BRAND_ALIASES = {
    "Lada (–í–ê–ó)": ["Lada", "–í–ê–ó", "–∫–∞–ª–∏–Ω—É", "–∫–∞–ª–∏–Ω–∞"],
    "Mercedes-Benz": ["Mercedes", "Mercedes-Benz"],
    "Volkswagen": ["VW", "Volkswagen"],
    "Chevrolet": ["–®–µ–≤—Ä–æ–ª–µ"],
    "Mazda": ["–ú–∞–∑–¥–∞"],
    "Renault": ["–†–µ–Ω–æ"],
}

async def extract_car_info(message):
    """–§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å, –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞, –ø—Ä–æ–±–µ–≥, —Ü–µ–Ω—É –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if not message.message:
        print(f"–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ—Ä—ã–≤–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {message.id}-{message.message}")
        return None, None, None, None, None, None

    brand, model, year, mileage, price, contact_number = None, None, None, None, None, None

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –±—Ä–µ–Ω–¥—ã, –≤–∫–ª—é—á–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    for car_brand in CAR_BRANDS:
        brand_variants = [car_brand] + BRAND_ALIASES.get(car_brand, [])
        for variant in brand_variants:
            if re.search(rf"\b{re.escape(variant)}\b", message.message, re.IGNORECASE):
                brand = car_brand
                break
        if brand:
            models = await get_cached_models(brand)  # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º await
            for one_model in models:
                if re.search(rf"\b{re.escape(one_model)}\b", message.message, re.IGNORECASE):
                    model = one_model
                    break

    # if message.photo:
    #     await get_media_from_message(message)

    # if not brand or not model and message.photo:
    #     print(f"–ï–°–¢–¨ –§–û–¢–û –∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –º–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –≤ —Ç–µ–∫—Å—Ç–µ:\n {message.message}")
    #     return None, None, None, None, None, None

    # –ü–æ–∏—Å–∫ –≥–æ–¥–∞
    year_match = re.search(r"\b(19\d{2}|20[0-3]\d)\b", message.message)
    if year_match:
        year = int(year_match.group(1))

    # –ü–æ–∏—Å–∫ –ø—Ä–æ–±–µ–≥–∞
    mileage_match = re.search(r"(\d{1,6})\s?(–∫–º|–∫)\b", message.message, re.IGNORECASE)
    if mileage_match:
        mileage = int(mileage_match.group(1))

    # –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã
    price = extract_price(message.message)

    # –ü–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    for match in re.finditer(r"\+?\d{10,15}", message.message):
        phone = phonenumbers.parse(match.group(), "RU")
        if phonenumbers.is_valid_number(phone):
            contact_number = phonenumbers.format_number(phone, phonenumbers.PhoneNumberFormat.INTERNATIONAL)
            break
    return brand, model, year, mileage, price, contact_number

def extract_price(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    price_match = re.search(
        r"\b(\d{1,3}(?:[.,\s]?\d{3})*|\d+(\.\d+)?)\s*(–º–ª–Ω|–∫–∫|—Ç—ã—Å|—Ç\.—Ä|—Ç—ã—Å\.—Ä—É–±|–∫)?",
        text, re.IGNORECASE
    )

    if price_match:
        price_str = price_match.group(1).replace(",", "").replace(".", "").replace("\xa0", "").replace(" ", "")

        try:
            price = int(price_str)
        except ValueError:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã: {price_str}")
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º `None`, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞

        multiplier = price_match.group(3)

        if multiplier:
            if "–º–ª–Ω" in multiplier or "–∫–∫" in multiplier:
                price *= 1_000_000
            elif "—Ç—ã—Å" in multiplier or "—Ç.—Ä" in multiplier:
                price *= 1_000

        if price > 2_147_483_647:
            price = 999_999_999  # –ü—Ä–µ–¥–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        return price

    return None


@sync_to_async
def get_cached_models(brand):
    """–ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ –ø–æ –º–∞—Ä–∫–µ"""
    cache_key = f"car_models_{brand}"
    models = cache.get(cache_key)

    if not models:  # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
        models = list(CarsDataTest.objects.filter(mark_name=brand).values_list("model_name", flat=True).distinct())
        cache.set(cache_key, models, timeout=60 * 60 * 24)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 24 —á–∞—Å–∞
        print(f"üîÑ –ö—ç—à –º–æ–¥–µ–ª–µ–π –¥–ª—è {brand} –æ–±–Ω–æ–≤–ª–µ–Ω")

    return models