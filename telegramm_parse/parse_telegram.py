import asyncio

from pyrogram import Client
from pyrogram.types import Message
import os
import sys
import django
import re
from django.conf import settings  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django

import phonenumbers
from asgiref.sync import sync_to_async  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º sync_to_async

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ Django-–ø—Ä–æ–µ–∫—Ç—É
sys.path.append("/home/t/PycharmProjects/auto_board")
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
django.setup()

from ads.models import CarsDataTest
from telegramm_parse.models import TelegramAd, TelegramAdImage  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram API
CHANNEL = "AvtoprodagaVolnovahairayon"  # –ò–º—è –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –µ–≥–æ ID
# CHANNEL = "LNR_AVTO"  # –ò–º—è –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –µ–≥–æ ID


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
app = Client(
    "session_name",
    api_id=24035219,
    api_hash="0ebf5b6846f7e4782ec98ea0e5c4a246"
)

from django.core.cache import cache
from ads.models import CarsDataTest


def get_cached_brands():
    """–ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ"""
    brands = cache.get("car_brands")

    if not brands:  # –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
        brands = list(CarsDataTest.objects.values_list("mark_name", flat=True).distinct())
        cache.set("car_brands", brands, timeout=60 * 60 * 24)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 24 —á–∞—Å–∞
        print("üîÑ –ö—ç—à –º–∞—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")

    return brands

@sync_to_async
def get_cached_models(brand):
    """–ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ –ø–æ –º–∞—Ä–∫–µ"""
    cache_key = f"car_models_{brand}"
    models = cache.get(cache_key)

    if not models:  # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
        models = list(CarsDataTest.objects.filter(mark_name=brand).values_list("model_name", flat=True).distinct())
        cache.set(cache_key, models, timeout=60 * 60 * 24)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 24 —á–∞—Å–∞
        print(f"üîÑ –ö—ç—à –º–æ–¥–µ–ª–µ–π –¥–ª—è {brand} –æ–±–Ω–æ–≤–ª–µ–Ω")

    return models


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
IMAGES_DIR = os.path.join(settings.MEDIA_ROOT, "telegram_ads")
os.makedirs(IMAGES_DIR, exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

# –°–ø–∏—Å–æ–∫ –º–∞—Ä–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
CAR_BRANDS = list(CarsDataTest.objects.values_list("mark_name", flat=True).distinct().order_by("mark_name"))
CAR_BRANDS = get_cached_brands()

@sync_to_async
def get_car_models(brand):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ."""
    return list(CarsDataTest.objects.filter(mark_name=brand).values_list("model_name", flat=True).distinct())

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –±—Ä–µ–Ω–¥–æ–≤
BRAND_ALIASES = {
    "Lada (–í–ê–ó)": ["Lada", "–í–ê–ó"],
    "Mercedes-Benz": ["Mercedes", "Mercedes-Benz"],
    "Volkswagen": ["VW", "Volkswagen"],
}

async def extract_car_info(text):
    """–§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å, –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞, –ø—Ä–æ–±–µ–≥, —Ü–µ–Ω—É –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # if not text:
    #     print("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞")
    #     return None, None, None, None, None, None

    brand, model, year, mileage, price, contact_number = None, None, None, None, None, None

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –±—Ä–µ–Ω–¥—ã, –≤–∫–ª—é—á–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    for car_brand in CAR_BRANDS:
        brand_variants = [car_brand] + BRAND_ALIASES.get(car_brand, [])
        for variant in brand_variants:
            if re.search(rf"\b{re.escape(variant)}\b", text, re.IGNORECASE):
                brand = car_brand
                break
        if brand:
            break

    if brand:
        models = await get_cached_models(brand)  # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º await
        for one_model in models:
            if re.search(rf"\b{re.escape(one_model)}\b", text, re.IGNORECASE):
                model = one_model
                break

    if not brand or not model:
        print(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –≤ —Ç–µ–∫—Å—Ç–µ: {text}")
        return None, None, None, None, None, None

    # –ü–æ–∏—Å–∫ –≥–æ–¥–∞
    year_match = re.search(r"\b(19\d{2}|20[0-3]\d)\b", text)
    if year_match:
        year = int(year_match.group(1))

    # –ü–æ–∏—Å–∫ –ø—Ä–æ–±–µ–≥–∞
    mileage_match = re.search(r"(\d{1,6})\s?(–∫–º|–∫)\b", text, re.IGNORECASE)
    if mileage_match:
        mileage = int(mileage_match.group(1))

    # –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã
    price = extract_price(text)

    # –ü–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    for match in re.finditer(r"\+?\d{10,15}", text):
        phone = phonenumbers.parse(match.group(), "RU")
        if phonenumbers.is_valid_number(phone):
            contact_number = phonenumbers.format_number(phone, phonenumbers.PhoneNumberFormat.INTERNATIONAL)
            break

    return brand, model, year, mileage, price, contact_number

@sync_to_async
def ad_exists(message_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ"""
    return TelegramAd.objects.filter(message_id=message_id).exists()

@sync_to_async
def save_ad(message, photo_paths, brand, model, year, mileage, price, contact_number):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –ë–î"""
    try:
        text = message.text or message.caption or "–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º fallback
        ad = TelegramAd.objects.create(
            message_id=message.id,
            text=text,  # ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            date_posted=message.date,
            brand=brand,
            model=model,
            year=year,
            mileage=mileage,
            price=price,
            contact_number=contact_number
        )
        for photo in photo_paths:
            TelegramAdImage.objects.create(ad=ad, image_url=photo)
        print(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ {message.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {message.id}: {e}")


async def get_media_from_message(message):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤."""
    photo_paths = set()

    async def download_photo(msg):
        """–§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ."""
        if msg.photo:
            photo_filename = f"{msg.id}_{msg.photo.file_unique_id}.jpg"
            relative_path = f"{settings.MEDIA_URL}telegram_ads/{photo_filename}"  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ë–î
            absolute_path = os.path.join(IMAGES_DIR, photo_filename)  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å

            if not os.path.exists(absolute_path):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–∞—á–∏–≤–∞–ª–æ—Å—å –ª–∏ —Ñ–æ—Ç–æ
                try:
                    await msg.download(file_name=absolute_path)
                    print(f"üì∏ –§–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ: {relative_path}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {photo_filename}: {e}")
                    return None  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–æ—á–Ω—ã–µ —Ñ–æ—Ç–æ

            return relative_path  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î

    tasks = []
    if message.media_group_id:
        media_group = await app.get_media_group(message.chat.id, message.id)
        tasks = [download_photo(m) for m in media_group]
    else:
        tasks.append(download_photo(message))

    results = await asyncio.gather(*tasks)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    return [r for r in results if r]  # –£–±–∏—Ä–∞–µ–º `None`


from pyrogram.errors import FloodWait
import random


async def parse_channel():
    """–ü–∞—Ä—Å–∏–º Telegram-–∫–∞–Ω–∞–ª —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç FloodWait."""
    async with app:
        print(f"üîé –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {CHANNEL}...")

        messages = []

        # while True:
        try:
            async for message in app.get_chat_history(CHANNEL, limit=1):
                messages.append(message)
                print(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –ø–æ–ª—É—á–µ–Ω–æ")
                await asyncio.sleep(random.uniform(1, 4))  # üïí –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

            if not messages:
                print("‚ö†Ô∏è –í —á–∞—Ç–µ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!")

            for msg in messages:
                await process_message(msg)
                await asyncio.sleep(random.uniform(2, 5))  # üïí –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π

            # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            await asyncio.sleep(random.uniform(10, 30))  # ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º

        except FloodWait as e:
            print(f"‚è≥ Telegram API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å—ã! –ñ–¥–µ–º {e.value} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(e.value)  # –ñ–¥–µ–º –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç Telegram

async def process_message(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ."""

    # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–µ
    if message.media_group_id:
        media_group = await app.get_media_group(message.chat.id, message.id)
        for msg in media_group:
            await process_message(msg)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø–µ
        return  # –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏, –≤—ã—Ö–æ–¥–∏–º

    # 2Ô∏è‚É£ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∏
    if not message.text and not message.caption:
        print(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} (–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞) - {message}")
        return

    # 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ
    if await ad_exists(message.id):
        print(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {message.id} (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
        return

    print(f"üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id}")

    # 4Ô∏è‚É£ –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    brand, model, year, mileage, price, contact_number = await extract_car_info(
        message.text or message.caption
    )

    # 5Ô∏è‚É£ –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if not brand or not model:
        print(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {message.id} (–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –º–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å)")
        return

    # 6Ô∏è‚É£ –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    await process_ad(message, brand, model, year, mileage, price, contact_number)


from django.utils.timezone import make_aware

async def process_ad(message, brand, model, year, mileage, price, contact_number):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ —Ñ–æ—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        photo_paths = await get_media_from_message(message)  # üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ

        # üîπ –î–µ–ª–∞–µ–º `date_posted` timezone-aware
        date_posted = make_aware(message.date) if message.date.tzinfo is None else message.date

        ad = await sync_to_async(TelegramAd.objects.create)(
            message_id=message.id,
            text=message.text or message.caption,
            date_posted=date_posted,
            brand=brand,
            model=model,
            year=year,
            mileage=mileage,
            price=price,
            contact_number=contact_number,
        )

        # üîπ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        image_tasks = [
            sync_to_async(TelegramAdImage.objects.create)(ad=ad, image_url=photo)
            for photo in photo_paths
        ]
        await asyncio.gather(*image_tasks)

        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {message.id}: {brand} {model}, {year}, {price} —Ä—É–±., {mileage} –∫–º, {contact_number} (–§–æ—Ç–æ: {photo_paths})")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {message.id}: {e}")


def extract_price(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    price_match = re.search(
        r"\b(\d{1,3}(?:[.,\s]?\d{3})*|\d+(\.\d+)?)\s*(–º–ª–Ω|–∫–∫|—Ç—ã—Å|—Ç\.—Ä|—Ç—ã—Å\.—Ä—É–±|–∫)?",
        text, re.IGNORECASE
    )

    if price_match:
        price_str = price_match.group(1).replace(",", "").replace(".", "").replace("\xa0", "").replace(" ", "")

        try:
            price = int(price_str)
        except ValueError:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã: {price_str}")
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º `None`, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞

        multiplier = price_match.group(3)

        if multiplier:
            if "–º–ª–Ω" in multiplier or "–∫–∫" in multiplier:
                price *= 1_000_000
            elif "—Ç—ã—Å" in multiplier or "—Ç.—Ä" in multiplier:
                price *= 1_000

        if price > 2_147_483_647:
            price = 999_999_999  # –ü—Ä–µ–¥–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        return price

    return None


# –ó–∞–ø—É—Å–∫
app.run(parse_channel())